(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{367:function(t,a,e){"use strict";e.r(a);var r=e(10),_=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"什么是正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是正则表达式"}},[t._v("#")]),t._v(" 什么是正则表达式 ？")]),t._v(" "),a("blockquote",[a("p",[t._v("正则表达式是一种被用于从文本中检索符合某些特定模式的文本。")])]),t._v(" "),a("p",[t._v("正则表达式是从左到右来匹配一个字符串的。“Regular Expression”这个词太长了，我们通常使用它的缩写“regex”或者“regexp”。\n正则表达式可以被用来替换字符串中的文本、验证表单、基于模式匹配从一个字符串中提取字符串等等。\n"),a("br")]),t._v(" "),a("p",[t._v("想象一下，您正在编写应用程序，并且您希望在用户选择用户名时设置规则。我们希望用户名可以包含字母，数字，下划线和连字符。\n为了让它看起来不丑，我们还想限制用户名中的字符数量。这时我们可以使用以下正则表达式来验证用户名：")]),t._v(" "),a("p",[a("code",[t._v("^[a-z0-9_-]{3,15}$")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("^")]),t._v(": Start of the line")]),t._v(" "),a("p",[a("code",[t._v("[a-z0-9_-]")]),t._v(": Letters,number,underscore,hyphen")]),t._v(" "),a("p",[a("code",[t._v("{3,15}")]),t._v(": 3 to 15 charcters long")]),t._v(" "),a("p",[a("code",[t._v("$")]),t._v(": End of the line")])]),t._v(" "),a("p",[t._v("上面这个正则表达式可以匹配 "),a("code",[t._v("john_doe")]),t._v("，"),a("code",[t._v("jo-hn_doe")]),t._v(" 和 "),a("code",[t._v("john12_as")]),t._v("。但是它不能匹配 "),a("code",[t._v("Jo")]),t._v("，因为该字符串里面包含大写字符，并且它太短了。")]),t._v(" "),a("h2",{attrs:{id:"目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1-%E5%9F%BA%E6%9C%AC%E5%8C%B9%E9%85%8D"}},[t._v("基本匹配")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2-%E5%85%83%E5%AD%97%E7%AC%A6"}},[t._v("元字符")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#21-%E8%8B%B1%E6%96%87%E5%8F%A5%E5%8F%B7"}},[t._v("英文句号")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#22-%E5%AD%97%E7%AC%A6%E9%9B%86"}},[t._v("字符集")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#221-%E5%90%A6%E5%AE%9A%E5%AD%97%E7%AC%A6%E9%9B%86"}},[t._v("否定字符集")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#23-%E9%87%8D%E5%A4%8D"}},[t._v("重复")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#231-%E6%98%9F%E5%8F%B7"}},[t._v("星号")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#232-%E5%8A%A0%E5%8F%B7"}},[t._v("加号")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#233-%E9%97%AE%E5%8F%B7"}},[t._v("问号")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#24-%E8%8A%B1%E6%8B%AC%E5%8F%B7"}},[t._v("花括号")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#25-%E5%AD%97%E7%AC%A6%E7%BB%84"}},[t._v("字符组")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#26-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84"}},[t._v("分支结构")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#27-%E8%BD%AC%E4%B9%89%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6"}},[t._v("转义特殊字符")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#28-%E5%AE%9A%E4%BD%8D%E7%AC%A6"}},[t._v("定位符")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#281-%E6%8F%92%E5%85%A5%E7%AC%A6%E5%8F%B7"}},[t._v("插入符号")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#282-%E7%BE%8E%E5%85%83%E7%AC%A6%E5%8F%B7"}},[t._v("美元符号")])])])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#3-%E7%AE%80%E5%86%99%E5%AD%97%E7%AC%A6%E9%9B%86"}},[t._v("简写字符集")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#4-%E6%96%AD%E8%A8%80"}},[t._v("断言")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#41-%E6%AD%A3%E5%90%91%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80"}},[t._v("正向先行断言")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#42-%E8%B4%9F%E5%90%91%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80"}},[t._v("负向先行断言")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#43-%E6%AD%A3%E5%90%91%E5%90%8E%E8%A1%8C%E6%96%AD%E8%A8%80"}},[t._v("正向后行断言")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#44-%E8%B4%9F%E5%90%91%E5%90%8E%E8%A1%8C%E6%96%AD%E8%A8%80"}},[t._v("负向后行断言")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#5-%E6%A0%87%E8%AE%B0"}},[t._v("标记")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#51-%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99"}},[t._v("不区分大小写")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#52-%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2"}},[t._v("全局搜索")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#53-%E5%A4%9A%E8%A1%8C%E5%8C%B9%E9%85%8D"}},[t._v("多行匹配")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F"}},[t._v("常用正则表达式")])])]),t._v(" "),a("h2",{attrs:{id:"_1-基本匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本匹配"}},[t._v("#")]),t._v(" 1. 基本匹配")]),t._v(" "),a("p",[t._v("正则表达式只是我们用于在文本中检索字符串的模式。例如正则表达式 "),a("code",[t._v("cat")]),t._v("，表示：字母 "),a("code",[t._v("c")]),t._v(" 后面跟着一个字母 "),a("code",[t._v("a")]),t._v("，再后面跟着一个字母 "),a("code",[t._v("t")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"cat" => The <a href="#learn-regex"><strong>cat</strong></a> sat on the mat\n')])])]),a("p",[t._v("正则表达式 "),a("code",[t._v("123")]),t._v(" 会匹配字符串“123”。通过将正则表达式中的每个字符逐个与要匹配的字符串中的每个字符进行比较，来完成正则匹配。\n正则表达式通常区分大小写，因此正则表达式 "),a("code",[t._v("Cat")]),t._v(" 与字符串“cat”不匹配。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"Cat" => The cat sat on the <a href="#learn-regex"><strong>Cat</strong></a>\n')])])]),a("h2",{attrs:{id:"_2-元字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-元字符"}},[t._v("#")]),t._v(" 2. 元字符")]),t._v(" "),a("p",[t._v("元字符是正则表达式的基本组成元素。元字符在这里跟它通常表达的意思不一样，而是以某种特殊的含义去解释。有些元字符在写在方括号内时有特殊含义。\n元字符如下：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("元字符")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v(".")]),t._v(" "),a("td",[t._v("匹配除换行符以外的任意字符。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("[ ]")]),t._v(" "),a("td",[t._v("字符类，匹配方括号中包含的任意字符。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("[^ ]")]),t._v(" "),a("td",[t._v("否定字符类。匹配方括号中不包含的任意字符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("*")]),t._v(" "),a("td",[t._v("匹配前面的子表达式零次或多次")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("+")]),t._v(" "),a("td",[t._v("匹配前面的子表达式一次或多次")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("?")]),t._v(" "),a("td",[t._v("匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("{n,m}")]),t._v(" "),a("td",[t._v("花括号，匹配前面字符至少 n 次，但是不超过 m 次。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("(xyz)")]),t._v(" "),a("td",[t._v("字符组，按照确切的顺序匹配字符 xyz。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("|")]),t._v(" "),a("td",[t._v("分支结构，匹配符号之前的字符或后面的字符。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\")]),t._v(" "),a("td",[t._v("转义符，它可以还原元字符原来的含义，允许你匹配保留字符 "),a("code",[t._v("[ ] ( ) { } . * + ? ^ $ \\ |")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("^")]),t._v(" "),a("td",[t._v("匹配行的开始")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$")]),t._v(" "),a("td",[t._v("匹配行的结束")])])])]),t._v(" "),a("h2",{attrs:{id:"_2-1-英文句号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-英文句号"}},[t._v("#")]),t._v(" 2.1 英文句号")]),t._v(" "),a("p",[t._v("英文句号 "),a("code",[t._v(".")]),t._v(" 是元字符的最简单的例子。元字符 "),a("code",[t._v(".")]),t._v(" 可以匹配任意单个字符。它不会匹配换行符和新行的字符。例如正则表达式 "),a("code",[t._v(".ar")]),t._v("，表示：任意字符后面跟着一个字母 "),a("code",[t._v("a")]),t._v("，\n再后面跟着一个字母 "),a("code",[t._v("r")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('".ar" => The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.\n')])])]),a("h2",{attrs:{id:"_2-2-字符集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-字符集"}},[t._v("#")]),t._v(" 2.2 字符集")]),t._v(" "),a("p",[t._v("字符集也称为字符类。方括号被用于指定字符集。使用字符集内的连字符来指定字符范围。方括号内的字符范围的顺序并不重要。\n例如正则表达式 "),a("code",[t._v("[Tt]he")]),t._v("，表示：大写 "),a("code",[t._v("T")]),t._v(" 或小写 "),a("code",[t._v("t")]),t._v(" ，后跟字母 "),a("code",[t._v("h")]),t._v("，再后跟字母 "),a("code",[t._v("e")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"[Tt]he" => <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.\n')])])]),a("p",[t._v("然而，字符集中的英文句号表示它字面的含义。正则表达式 "),a("code",[t._v("ar[.]")]),t._v("，表示小写字母 "),a("code",[t._v("a")]),t._v("，后面跟着一个字母 "),a("code",[t._v("r")]),t._v("，再后面跟着一个英文句号 "),a("code",[t._v(".")]),t._v(" 字符。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"ar[.]" => A garage is a good place to park a c<a href="#learn-regex"><strong>ar.</strong></a>\n')])])]),a("h3",{attrs:{id:"_2-2-1-否定字符集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-否定字符集"}},[t._v("#")]),t._v(" 2.2.1 否定字符集")]),t._v(" "),a("p",[t._v("一般来说插入字符 "),a("code",[t._v("^")]),t._v(" 表示一个字符串的开始，但是当它在方括号内出现时，它会取消字符集。例如正则表达式 "),a("code",[t._v("[^c]ar")]),t._v("，表示：除了字母 "),a("code",[t._v("c")]),t._v(" 以外的任意字符，后面跟着字符 "),a("code",[t._v("a")]),t._v("，\n再后面跟着一个字母 "),a("code",[t._v("r")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"[^c]ar" => The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.\n')])])]),a("h2",{attrs:{id:"_2-3-重复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-重复"}},[t._v("#")]),t._v(" 2.3 重复")]),t._v(" "),a("p",[t._v("以下元字符 "),a("code",[t._v("+")]),t._v("，"),a("code",[t._v("*")]),t._v(" 或 "),a("code",[t._v("?")]),t._v(" 用于指定子模式可以出现多少次。这些元字符在不同情况下的作用不同。")]),t._v(" "),a("h3",{attrs:{id:"_2-3-1-星号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-星号"}},[t._v("#")]),t._v(" 2.3.1 星号")]),t._v(" "),a("p",[t._v("星号 "),a("code",[t._v("*")]),t._v(" 表示匹配上一个匹配规则零次或多次。正则表达式 "),a("code",[t._v("a*")]),t._v(" 表示小写字母 "),a("code",[t._v("a")]),t._v(" 可以重复零次或者多次。但是它如果出现在字符集或者字符类之后，它表示整个字符集的重复。\n例如正则表达式 "),a("code",[t._v("[a-z]*")]),t._v("，表示：一行中可以包含任意数量的小写字母。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"[a-z]*" => T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.\n')])])]),a("p",[t._v("星号 "),a("code",[t._v("*")]),t._v(" 可以与元符号 "),a("code",[t._v(".")]),t._v(" 用在一起，用来匹配任意字符串 "),a("code",[t._v(".*")]),t._v("。星号 "),a("code",[t._v("*")]),t._v(" 可以与空格符 "),a("code",[t._v("\\s")]),t._v(" 一起使用，用来匹配一串空格字符。\n例如正则表达式 "),a("code",[t._v("\\s*cat\\s*")]),t._v("，表示：零个或多个空格，后面跟小写字母 "),a("code",[t._v("c")]),t._v("，再后面跟小写字母 "),a("code",[t._v("a")]),t._v("，再在后面跟小写字母 "),a("code",[t._v("t")]),t._v("，后面再跟零个或多个空格。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"\\s*cat\\s*" => The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the <a href="#learn-regex"><strong>cat</strong></a>.\n')])])]),a("h3",{attrs:{id:"_2-3-2-加号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-加号"}},[t._v("#")]),t._v(" 2.3.2 加号")]),t._v(" "),a("p",[t._v("加号 "),a("code",[t._v("+")]),t._v(" 表示匹配上一个字符一次或多次。例如正则表达式 "),a("code",[t._v("c.+t")]),t._v("，表示：一个小写字母 "),a("code",[t._v("c")]),t._v("，后跟任意数量的字符，后跟小写字母 "),a("code",[t._v("t")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"c.+t" => The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.\n')])])]),a("h3",{attrs:{id:"_2-3-3-问号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-问号"}},[t._v("#")]),t._v(" 2.3.3 问号")]),t._v(" "),a("p",[t._v("在正则表达式中，元字符 "),a("code",[t._v("?")]),t._v(" 用来表示前一个字符是可选的。该符号匹配前一个字符零次或一次。\n例如正则表达式 "),a("code",[t._v("[T]?he")]),t._v("，表示：可选的大写字母 "),a("code",[t._v("T")]),t._v("，后面跟小写字母 "),a("code",[t._v("h")]),t._v("，后跟小写字母 "),a("code",[t._v("e")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"[T]he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"[T]?he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.\n')])])]),a("h2",{attrs:{id:"_2-4-花括号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-花括号"}},[t._v("#")]),t._v(" 2.4 花括号")]),t._v(" "),a("p",[t._v("在正则表达式中花括号（也被称为量词？）用于指定字符或一组字符可以重复的次数。例如正则表达式 "),a("code",[t._v("[0-9]{2,3}")]),t._v("，表示：匹配至少 2 位数字但不超过 3 位（0 到 9 范围内的字符）。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"[0-9]{2,3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.\n')])])]),a("p",[t._v("我们可以省略第二个数字。例如正则表达式 "),a("code",[t._v("[0-9]{2,}")]),t._v("，表示：匹配 2 个或更多个数字。如果我们也删除逗号，则正则表达式 "),a("code",[t._v("[0-9]{2}")]),t._v("，表示：匹配正好为 2 位数的数字。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"[0-9]{2,}" => The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"[0-9]{2}" => The number was 9.<a href="#learn-regex"><strong>99</strong></a><a href="#learn-regex"><strong>97</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.\n')])])]),a("h2",{attrs:{id:"_2-5-字符组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-字符组"}},[t._v("#")]),t._v(" 2.5 字符组")]),t._v(" "),a("p",[t._v("字符组是一组写在圆括号内的子模式 "),a("code",[t._v("(...)")]),t._v("。正如我们在正则表达式中讨论的那样，如果我们把一个量词放在一个字符之后，它会重复前一个字符。\n但是，如果我们把量词放在一个字符组之后，它会重复整个字符组。\n例如正则表达式 "),a("code",[t._v("(ab)*")]),t._v(" 表示匹配零个或多个的字符串“ab”。我们还可以在字符组中使用元字符 "),a("code",[t._v("|")]),t._v("。例如正则表达式 "),a("code",[t._v("(c|g|p)ar")]),t._v("，表示：小写字母 "),a("code",[t._v("c")]),t._v("、"),a("code",[t._v("g")]),t._v(" 或 "),a("code",[t._v("p")]),t._v(" 后面跟字母 "),a("code",[t._v("a")]),t._v("，后跟字母 "),a("code",[t._v("r")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"(c|g|p)ar" => The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.\n')])])]),a("h2",{attrs:{id:"_2-6-分支结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-分支结构"}},[t._v("#")]),t._v(" 2.6 分支结构")]),t._v(" "),a("p",[t._v("在正则表达式中垂直条 "),a("code",[t._v("|")]),t._v(" 用来定义分支结构，分支结构就像多个表达式之间的条件。现在你可能认为这个字符集和分支结构的工作方式一样。\n但是字符集和分支结构巨大的区别是字符集只在字符级别上有作用，然而分支结构在表达式级别上依然可以使用。\n例如正则表达式 "),a("code",[t._v("(T|t)he|car")]),t._v("，表示：匹配大写字母 "),a("code",[t._v("T")]),t._v(" 或小写字母 "),a("code",[t._v("t")]),t._v("，后面跟小写字母 "),a("code",[t._v("h")]),t._v("，后跟小写字母 "),a("code",[t._v("e")]),t._v("，或匹配小写字母 "),a("code",[t._v("c")]),t._v("，后跟小写字母 "),a("code",[t._v("a")]),t._v("，后跟小写字母 "),a("code",[t._v("r")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"(T|t)he|car" => <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.\n')])])]),a("h2",{attrs:{id:"_2-7-转义特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-转义特殊字符"}},[t._v("#")]),t._v(" 2.7 转义特殊字符")]),t._v(" "),a("p",[t._v("正则表达式中使用反斜杠 "),a("code",[t._v("\\")]),t._v(" 来转义下一个字符。这将允许你使用保留字符来作为匹配字符 "),a("code",[t._v("{ } [ ] / \\ + * . $ ^ | ?")]),t._v("。在特殊字符前面加 "),a("code",[t._v("\\")]),t._v("，就可以使用它来做匹配字符。\n例如正则表达式 "),a("code",[t._v(".")]),t._v(" 是用来匹配除了换行符以外的任意字符。现在要在输入字符串中匹配 "),a("code",[t._v(".")]),t._v(" 字符，正则表达式 "),a("code",[t._v("(f|c|m)at\\.?")]),t._v("，表示：小写字母 "),a("code",[t._v("f")]),t._v("、"),a("code",[t._v("c")]),t._v(" 或者 "),a("code",[t._v("m")]),t._v(" 后跟小写字母 "),a("code",[t._v("a")]),t._v("，后跟小写字母 "),a("code",[t._v("t")]),t._v("，后跟可选的 "),a("code",[t._v(".")]),t._v(" 字符。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"(f|c|m)at\\.?" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a>\n')])])]),a("h2",{attrs:{id:"_2-8-定位符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-定位符"}},[t._v("#")]),t._v(" 2.8 定位符")]),t._v(" "),a("p",[t._v("在正则表达式中，为了检查匹配符号是否是起始符号或结尾符号，我们使用定位符。\n定位符有两种类型：第一种类型是 "),a("code",[t._v("^")]),t._v(" 检查匹配字符是否是起始字符，第二种类型是 "),a("code",[t._v("$")]),t._v("，它检查匹配字符是否是输入字符串的最后一个字符。")]),t._v(" "),a("h3",{attrs:{id:"_2-8-1-插入符号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-1-插入符号"}},[t._v("#")]),t._v(" 2.8.1 插入符号")]),t._v(" "),a("p",[t._v("插入符号 "),a("code",[t._v("^")]),t._v(" 符号用于检查匹配字符是否是输入字符串的第一个字符。如果我们使用正则表达式 "),a("code",[t._v("^a")]),t._v("（如果 a 是起始符号）匹配字符串 "),a("code",[t._v("abc")]),t._v("，它会匹配到 "),a("code",[t._v("a")]),t._v("。\n但是如果我们使用正则表达式 "),a("code",[t._v("^b")]),t._v("，它是匹配不到任何东西的，因为在字符串 "),a("code",[t._v("abc")]),t._v(" 中“b”不是起始字符。\n让我们来看看另一个正则表达式 "),a("code",[t._v("^(T|t)he")]),t._v("，这表示：大写字母 "),a("code",[t._v("T")]),t._v(" 或小写字母 "),a("code",[t._v("t")]),t._v(" 是输入字符串的起始符号，后面跟着小写字母 "),a("code",[t._v("h")]),t._v("，后跟小写字母 "),a("code",[t._v("e")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"^(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.\n')])])]),a("h3",{attrs:{id:"_2-8-2-美元符号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-2-美元符号"}},[t._v("#")]),t._v(" 2.8.2 美元符号")]),t._v(" "),a("p",[t._v("美元 "),a("code",[t._v("$")]),t._v(" 符号用于检查匹配字符是否是输入字符串的最后一个字符。例如正则表达式 "),a("code",[t._v("(at\\.)$")]),t._v("，表示：小写字母 "),a("code",[t._v("a")]),t._v("，后跟小写字母 "),a("code",[t._v("t")]),t._v("，后跟一个 "),a("code",[t._v(".")]),t._v(" 字符，且这个匹配器必须是字符串的结尾。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"(at\\.)" => The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a>\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"(at\\.)$" => The fat cat sat on the m<a href="#learn-regex"><strong>at.</strong></a>\n')])])]),a("h2",{attrs:{id:"_3-简写字符集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-简写字符集"}},[t._v("#")]),t._v(" 3. 简写字符集")]),t._v(" "),a("p",[t._v("正则表达式为常用的字符集和常用的正则表达式提供了简写。简写字符集如下：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("简写")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v(".")]),t._v(" "),a("td",[t._v("匹配除换行符以外的任意字符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\w")]),t._v(" "),a("td",[t._v("匹配所有字母和数字的字符："),a("code",[t._v("[a-zA-Z0-9_]")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\W")]),t._v(" "),a("td",[t._v("匹配非字母和数字的字符："),a("code",[t._v("[^\\w]")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\d")]),t._v(" "),a("td",[t._v("匹配数字："),a("code",[t._v("[0-9]")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\D")]),t._v(" "),a("td",[t._v("匹配非数字："),a("code",[t._v("[^\\d]")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\s")]),t._v(" "),a("td",[t._v("匹配空格符："),a("code",[t._v("[\\t\\n\\f\\r\\p{Z}]")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\S")]),t._v(" "),a("td",[t._v("匹配非空格符："),a("code",[t._v("[^\\s]")])])])])]),t._v(" "),a("h2",{attrs:{id:"_4-断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-断言"}},[t._v("#")]),t._v(" 4. 断言")]),t._v(" "),a("p",[t._v("后行断言和先行断言有时候被称为断言，它们是特殊类型的 "),a("em",[a("strong",[t._v("非捕获组")])]),t._v("（用于匹配模式，但不包括在匹配列表中）。当我们在一种特定模式之前或者之后有这种模式时，会优先使用断言。\n例如我们想获取输入字符串 "),a("code",[t._v("$4.44 and $10.88")]),t._v(" 中带有前缀 "),a("code",[t._v("$")]),t._v(" 的所有数字。我们可以使用这个正则表达式 "),a("code",[t._v("(?<=\\$)[0-9\\.]*")]),t._v("，表示：获取包含 "),a("code",[t._v(".")]),t._v(" 字符且前缀为 "),a("code",[t._v("$")]),t._v(" 的所有数字。\n以下是正则表达式中使用的断言：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("符号")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("?=")]),t._v(" "),a("td",[t._v("正向先行断言")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("?!")]),t._v(" "),a("td",[t._v("负向先行断言")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("?<=")]),t._v(" "),a("td",[t._v("正向后行断言")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("?<!")]),t._v(" "),a("td",[t._v("负向后行断言")])])])]),t._v(" "),a("h3",{attrs:{id:"_4-1-正向先行断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-正向先行断言"}},[t._v("#")]),t._v(" 4.1 正向先行断言")]),t._v(" "),a("p",[t._v("正向先行断言认为第一部分的表达式的后面必须是先行断言表达式。返回的匹配结果仅包含与第一部分表达式匹配的文本。\n要在一个括号内定义一个正向先行断言，在括号中问号和等号是这样使用的 "),a("code",[t._v("(?=...)")]),t._v("。先行断言表达式写在括号中的等号后面。\n例如正则表达式 "),a("code",[t._v("(T|t)he(?=\\sfat)")]),t._v("，表示：匹配大写字母 "),a("code",[t._v("T")]),t._v(" 或小写字母 "),a("code",[t._v("t")]),t._v("，后面跟字母 "),a("code",[t._v("h")]),t._v("，后跟字母 "),a("code",[t._v("e")]),t._v("。\n在括号中，我们定义了正向先行断言，它会引导正则表达式引擎匹配后面跟着 "),a("code",[t._v("fat")]),t._v(" 的 "),a("code",[t._v("The")]),t._v(" 或 "),a("code",[t._v("the")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"(T|t)he(?=\\sfat)" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.\n')])])]),a("h3",{attrs:{id:"_4-2-负向先行断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-负向先行断言"}},[t._v("#")]),t._v(" 4.2 负向先行断言")]),t._v(" "),a("p",[t._v("当我们需要指定第一部分表达式的后面不跟随某一内容时，使用负向先行断言。负向先行断言的定义跟我们定义的正向先行断言一样，\n唯一的区别在于我们使用否定符号 "),a("code",[t._v("!")]),t._v(" 而不是等号 "),a("code",[t._v("=")]),t._v("，例如 "),a("code",[t._v("(?!...)")]),t._v("。\n我们来看看下面的正则表达式 "),a("code",[t._v("(T|t)he(?!\\sfat)")]),t._v("，表示：从输入字符串中获取全部 "),a("code",[t._v("The")]),t._v(" 或者 "),a("code",[t._v("the")]),t._v(" 且不匹配 "),a("code",[t._v("fat")]),t._v(" 前面加上一个空格字符。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"(T|t)he(?!\\sfat)" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.\n')])])]),a("h3",{attrs:{id:"_4-3-正向后行断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-正向后行断言"}},[t._v("#")]),t._v(" 4.3 正向后行断言")]),t._v(" "),a("p",[t._v("正向后行断言用于获取跟随在特定模式之后的所有匹配内容。正向后行断言表示为 "),a("code",[t._v("(?<=...)")]),t._v("。例如正则表达式 "),a("code",[t._v("(?<=(T|t)he\\s)(fat|mat)")]),t._v("，表示：从输入字符串中获取在单词 "),a("code",[t._v("The")]),t._v(" 或 "),a("code",[t._v("the")]),t._v(" 之后的所有 "),a("code",[t._v("fat")]),t._v(" 和 "),a("code",[t._v("mat")]),t._v(" 单词。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"(?<=(T|t)he\\s)(fat|mat)" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.\n')])])]),a("h3",{attrs:{id:"_4-4-负向后行断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-负向后行断言"}},[t._v("#")]),t._v(" 4.4 负向后行断言")]),t._v(" "),a("p",[t._v("负向后行断言是用于获取不跟随在特定模式之后的所有匹配的内容。负向后行断言表示为 "),a("code",[t._v("(?<!...)")]),t._v("。例如正则表达式 "),a("code",[t._v("(?<!(T|t)he\\s)(cat)")]),t._v("，表示：在输入字符中获取所有不在 "),a("code",[t._v("The")]),t._v(" 或 "),a("code",[t._v("the")]),t._v(" 之后的所有单词 "),a("code",[t._v("cat")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"(?&lt;!(T|t)he\\s)(cat)" => The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.\n')])])]),a("h2",{attrs:{id:"_5-标记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-标记"}},[t._v("#")]),t._v(" 5. 标记")]),t._v(" "),a("p",[t._v("标记也称为修饰符，因为它会修改正则表达式的输出。这些标志可以以任意顺序或组合使用，并且是正则表达式的一部分。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("标记")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("i")]),t._v(" "),a("td",[t._v("不区分大小写：将匹配设置为不区分大小写。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("g")]),t._v(" "),a("td",[t._v("全局搜索：搜索整个输入字符串中的所有匹配。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("m")]),t._v(" "),a("td",[t._v("多行匹配：会匹配输入字符串每一行。")])])])]),t._v(" "),a("h3",{attrs:{id:"_5-1-不区分大小写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-不区分大小写"}},[t._v("#")]),t._v(" 5.1 不区分大小写")]),t._v(" "),a("p",[a("code",[t._v("i")]),t._v(" 修饰符用于执行不区分大小写匹配。例如正则表达式 "),a("code",[t._v("/The/gi")]),t._v("，表示：大写字母 "),a("code",[t._v("T")]),t._v("，后跟小写字母 "),a("code",[t._v("h")]),t._v("，后跟字母 "),a("code",[t._v("e")]),t._v("。\n但是在正则匹配结束时 "),a("code",[t._v("i")]),t._v(" 标记会告诉正则表达式引擎忽略这种情况。正如你所看到的，我们还使用了 "),a("code",[t._v("g")]),t._v(" 标记，因为我们要在整个输入字符串中搜索匹配。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"/The/gi" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.\n')])])]),a("h3",{attrs:{id:"_5-2-全局搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-全局搜索"}},[t._v("#")]),t._v(" 5.2 全局搜索")]),t._v(" "),a("p",[a("code",[t._v("g")]),t._v(" 修饰符用于执行全局匹配（会查找所有匹配，不会在查找到第一个匹配时就停止）。\n例如正则表达式 "),a("code",[t._v("/.(at)/g")]),t._v("，表示：除换行符之外的任意字符，后跟小写字母 "),a("code",[t._v("a")]),t._v("，后跟小写字母 "),a("code",[t._v("t")]),t._v("。\n因为我们在正则表达式的末尾使用了 "),a("code",[t._v("g")]),t._v(" 标记，它会从整个输入字符串中找到每个匹配项。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('".(at)" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"/.(at)/g" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> <a href="#learn-regex"><strong>sat</strong></a> on the <a href="#learn-regex"><strong>mat</strong></a>.\n')])])]),a("h3",{attrs:{id:"_5-3-多行匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-多行匹配"}},[t._v("#")]),t._v(" 5.3 多行匹配")]),t._v(" "),a("p",[a("code",[t._v("m")]),t._v(" 修饰符被用来执行多行的匹配。正如我们前面讨论过的 "),a("code",[t._v("(^, $)")]),t._v("，使用定位符来检查匹配字符是输入字符串开始或者结束。但是我们希望每一行都使用定位符，所以我们就使用 "),a("code",[t._v("m")]),t._v(" 修饰符。\n例如正则表达式 "),a("code",[t._v("/at(.)?$/gm")]),t._v("，表示：小写字母 "),a("code",[t._v("a")]),t._v("，后跟小写字母 "),a("code",[t._v("t")]),t._v("，匹配除了换行符以外任意字符零次或一次。而且因为 "),a("code",[t._v("m")]),t._v(" 标记，现在正则表达式引擎匹配字符串中每一行的末尾。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"/.at(.)?$/" => The fat\n                cat sat\n                on the <a href="#learn-regex"><strong>mat.</strong></a>\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"/.at(.)?$/gm" => The <a href="#learn-regex"><strong>fat</strong></a>\n                  cat <a href="#learn-regex"><strong>sat</strong></a>\n                  on the <a href="#learn-regex"><strong>mat.</strong></a>\n')])])]),a("h2",{attrs:{id:"常用正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用正则表达式"}},[t._v("#")]),t._v(" 常用正则表达式")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("正整数")]),t._v("："),a("code",[t._v("^\\d+$")])]),t._v(" "),a("li",[a("strong",[t._v("负整数")]),t._v("："),a("code",[t._v("^-\\d+$")])]),t._v(" "),a("li",[a("strong",[t._v("电话号码")]),t._v("："),a("code",[t._v("^+?[\\d\\s]{3,}$")])]),t._v(" "),a("li",[a("strong",[t._v("电话代码")]),t._v("："),a("code",[t._v("^+?[\\d\\s]+(?[\\d\\s]{10,}$")])]),t._v(" "),a("li",[a("strong",[t._v("整数")]),t._v("："),a("code",[t._v("^-?\\d+$")])]),t._v(" "),a("li",[a("strong",[t._v("用户名")]),t._v("："),a("code",[t._v("^[\\w\\d_.]{4,16}$")])]),t._v(" "),a("li",[a("strong",[t._v("字母数字字符")]),t._v("："),a("code",[t._v("^[a-zA-Z0-9]*$")])]),t._v(" "),a("li",[a("strong",[t._v("带空格的字母数字字符")]),t._v("："),a("code",[t._v("^[a-zA-Z0-9 ]*$")])]),t._v(" "),a("li",[a("strong",[t._v("密码")]),t._v("："),a("code",[t._v("^(?=^.{6,}$)((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.*$")])]),t._v(" "),a("li",[a("strong",[t._v("电子邮件")]),t._v("："),a("code",[t._v("^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4})*$")])]),t._v(" "),a("li",[a("strong",[t._v("IPv4 地址")]),t._v("："),a("code",[t._v("^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$")])]),t._v(" "),a("li",[a("strong",[t._v("小写字母")]),t._v("："),a("code",[t._v("^([a-z])*$")])]),t._v(" "),a("li",[a("strong",[t._v("大写字母")]),t._v("："),a("code",[t._v("^([A-Z])*$")])]),t._v(" "),a("li",[a("strong",[t._v("网址")]),t._v("："),a("code",[t._v("^(((http|https|ftp):\\/\\/)?([[a-zA-Z0-9]\\-\\.])+(\\.)([[a-zA-Z0-9]]){2,4}([[a-zA-Z0-9]\\/+=%&_\\.~?\\-]*))*$")])]),t._v(" "),a("li",[a("strong",[t._v("VISA 信用卡号码")]),t._v("："),a("code",[t._v("^(4[0-9]{12}(?:[0-9]{3})?)*$")])]),t._v(" "),a("li",[a("strong",[t._v("日期（MM/DD/YYYY）")]),t._v("："),a("code",[t._v("^(0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)?[0-9]{2}$")])]),t._v(" "),a("li",[a("strong",[t._v("日期（YYYY/MM/DD）")]),t._v("："),a("code",[t._v("^(19|20)?[0-9]{2}[- /.](0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])$")])]),t._v(" "),a("li",[a("strong",[t._v("万事达信用卡号码")]),t._v("："),a("code",[t._v("^(5[1-5][0-9]{14})*$")])])]),t._v(" "),a("h2",{attrs:{id:"编写正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写正则表达式"}},[t._v("#")]),t._v(" 编写正则表达式")]),t._v(" "),a("p",[t._v("创建方式有两种")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自变量方式常见（两个斜杠之间抱起来，描述规则的元字符）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数模式创建 参数（元字符字符串，修饰符字符串）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\d+"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("正则表达式由两部分组成")]),t._v(" "),a("ul",[a("li",[t._v("元字符")]),t._v(" "),a("li",[t._v("修饰符")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/* 常用元字符 */\n# 1. 量词元字符 设置出现的次数\n*       // 零到多次\n+       // 一到多次\n?       // 零次或者一次\n{n}     // 出现n次\n{n,}    // 出现n到多次\n{n,m}   // 出现n到m次\n\n# 2. 特殊元字符 单个或者组合再一起代表特殊的含义\n\\       // 转义字符\n.       // 除\\n(换行符)意外的任意字符\n^       // 以哪一个元字符作为开始\n$       // 以哪一个元字符作为结束\n\\n      // 换行符\n\\d      // 0-9 之间的一个数字\n\\D      // 非0-9之间的一个数字（大写和小写的意思相反）\n\\w      // 数字、字符、下划线中任意一个字符\n\\s      // 一个空白字符(包含空格、制表符、换页符等)\n\\t      // 一个制表符（一个TAB键：四个空格）\n\\b      // 匹配一个单词的边界\nx|y     // x或y中的一个字符\n[xyz]   // xyz中的一个字符\n[^]     // 除了xy以外的任意字符\n[a-z]   // 指定a-z这个范围中的任意字符 [0-9a-zA-Z_]===\\w\n[^a-z]  // 除了a-\n()      // 正则中的分组符号\n(?:)    // 只匹配不捕获\n(?=)    // 正向预查\n(?!)    // 负向预查\n\n# 3. 普通元字符：代表本身含义的\n/rain/  // 此正则匹配的是rain\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/* 正则表达式常用的修饰符 */\ni       // 忽略大小写匹配\nm       // 进行多次匹配\ng       // 全局匹配\n")])])]),a("h2",{attrs:{id:"常用正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用正则"}},[t._v("#")]),t._v(" 常用正则")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("/^"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("d+$/    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 匹配是否是纯数字")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("W"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("+?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 匹配对象")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("测试用例:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("export default definePageConfig({\n   navigationBarTitleText: '反馈页',\n   enableShareAppMessage: true,\n   fixTitle: true\n});\n")])])])])])}),[],!1,null,null,null);a.default=_.exports}}]);